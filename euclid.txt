
# include <stdio.h>
# include <stdlib.h>

int sq(int x){
    return x*x;
}

int modularexp(int a, int b, int c){

    if (a==0)
    {
        return 0;
    }
    if (b==0)
    {
        return 1;
    }
    if (b==1)
    {
        return a%c;
    }
    
    a=a%c;
    
    if (b%2==0)
    {
        return sq(modularexp(a, b/2, c))%c ;
    }
    else{
        return (a*modularexp(a,b-1,c))%c;
    }
}

struct gcd
{
    int gcd;
    int modinv;
};

struct gcd modularinv(int x, int y){
    // returns x^-1 mod y
    int iteration = 0;
    int n = y;
    int q2, q1, q0, p2=0, p1=1, p0, r=1;
    
    while (r!=0)
    {
        q0 = y/x;
        r = y%x;
        
        y=x;
        x=r;
        if (iteration==0)
        {
            p0=0;
        }
        else if (iteration==1)
        {
            p0=1;
        }
        else{
            // printf("%d %d %d %d\n", p0, p1, p2, q2);
            p0 = p2-p1*q2;
            while (p0<0)
            {
                p0+=n;
            }
            p0%=n;
            
        // printf("eof iter %d p0=%d p1=%d p2=%d q2=%d q0=%d x=%d y=%d r=%d\n", iteration, p0,p1,p2,q2, q0, x, y, r);
            p2=p1;
            p1=p0;
            // printf("%d\n", p0);
        }
        
            // printf("%d\n", q0);

        q2=q1;
        q1=q0;
        iteration++;

    }
    struct gcd ret;
    
    if (y != 1) {
        // No modular inverse exists if gcd(x, y) != 1
        ret.gcd = y;
        ret.modinv = 0;
        return ret; 
    }
    
    p0 = p2-p1*q2;
    p0%=n;
    
    while (p0<0)
    {
        p0+=n;
    }
    
    ret.gcd = y; // basically 1
    ret.modinv = p0;
    
    return ret;
    
    
}

int main(){
    
    int n;
    scanf("%d", &n);
    
    if (n==0)
    {
        int a,b,c;
        scanf("%d %d %d", &a, &b, &c);
        printf("%d", modularexp(a,b,c));
    }
    
    else if (n==1)
    {
        int x, y;
        scanf("%d %d", &x, &y);
        struct gcd res = modularinv(x, y);
        printf("%d %d", res.gcd, res.modinv);
    }
    
    return 0;
}