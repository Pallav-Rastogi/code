
#include <stdio.h>
#include <stdlib.h>

// Structure to store the distance and its corresponding index
struct DistWithIndex {
    int dist;
    int index;
};

// Comparison function to sort the array by distance value
int compare(const void *a, const void *b) {
    struct DistWithIndex *e1 = (struct DistWithIndex *)a;
    struct DistWithIndex *e2 = (struct DistWithIndex *)b;
    return e1->dist - e2->dist; // Sorting in increasing order of distance
}

int findmin(int arr[], int extracted[], int n){
    int min = 1e6 + 1;
    int idx = 0;

    for (int i = 0; i < n; i++) {
        if (extracted[i] == 1) {
            continue;
        }
        if (min > arr[i]) {
            min = arr[i];
            idx = i;
        }
    }
    return idx;
}

int main() {
    int n;
    scanf("%d", &n);
    int arr[n][n];

    // Initialize arr to -1
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            arr[i][j] = -1;
        }
    }

    int vtx = 0;
    int val = 0;

    // Input adjacency matrix
    for (int i = 0; i < n; i++) {
        while (1) {
            scanf("%d", &vtx);
            if (vtx != -1) {
                scanf("%d", &val);
                arr[i][vtx] = val;
            } else {
                break;
            }
        }
    }

    int startnode;
    scanf("%d", &startnode);

    int dist[n];
    int extracted[n];
    
    for (int i = 0; i < n; i++) {
        dist[i] = 1e6;
        extracted[i] = 0;
    }

    dist[startnode] = 0;

    // Dijkstra's algorithm to find the shortest path
    for (int i = 0; i < n; i++) {
        int curridx = findmin(dist, extracted, n);
        extracted[curridx] = 1;

        for (int j = 0; j < n; j++) {
            if (arr[curridx][j] != -1 && extracted[j] == 0) {
                if (dist[j] > dist[curridx] + arr[curridx][j]) {
                    dist[j] = dist[curridx] + arr[curridx][j];
                }
            }
        }
    }

    // Store distances along with their indices
    struct DistWithIndex distWithIndex[n];
    for (int i = 0; i < n; i++) {
        distWithIndex[i].dist = dist[i];
        distWithIndex[i].index = i;
    }

    // Sort the distWithIndex array by the distance values
    qsort(distWithIndex, n, sizeof(struct DistWithIndex), compare);

    // Print in the required format
    for (int i = 0; i < n; i++) {
        printf("%d %d ", distWithIndex[i].index, distWithIndex[i].dist);
    }

    return 0;
}
